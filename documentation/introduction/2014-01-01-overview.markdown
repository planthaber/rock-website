---
layout: post
title:  "Overview"
smallDescription: "Agenda corp1."
imgSrc: "assets/frontend/pages/img/works/img1.jpg"
date:   2014-11-22 23:08:05
categories: introduction
group: "overview"
---

Rock offers both a <strong>rich development environment</strong> and a collection of <strong>ready-to-use packages</strong>. This documentation pages describe the development environment as well as some important “core” libraries. For the package documentation, got to the <a href="/pkg">package list</a>.

## Development Workflow

<div class="fullwidth_video_400">
<iframe src="http://www.youtube.com/embed/UkZYiw7crbw" frameborder="0" height="290" width="400">Youtube Video</iframe>
</div>

First and foremost, development in Rock always starts with <strong><a href="tutorials/100_basics_create_library.html">creating a library</a></strong>. As a guideline, this library has to be independent of Rock’s component-based integration framework. That’s right, even if you don’t use Rock’s tooling, <a href="packages/outside_of_rock.html">feel free to use its drivers and algorithms</a> Then, this library gets integrated in <strong>oroGen</strong>, Rock’s component-oriented integration framework.

For runtime, network of Rock components are often setup and managed using <a href="http://ruby-lang.org">the Ruby programming language</a>. Bindings to Ruby allow to start processes, start and stop components, connect them together and bind them to user interfaces in a very flexible way.

<a href="tutorials/index.html">Tutorials</a> will guide you through getting to grips with the process, from a library to running network of components.

## Data Analysis
<div class="fullwidth_video_400">
    <iframe src="http://www.youtube.com/embed/PhHFzCNvjlQ" frameborder="0" height="290" width="400">Youtube Video</iframe>
</div>

At this point, Rock offers extended support for runtime as well as offline data analysis. <a href="data_analysis/index.html">Logging</a> is an integral part of the development workflow: it can be used for post-mortem analysis as well as to test components through log replay mechanisms. Then, <strong>Vizkit</strong> kicks in. is both an oroGen-independent library of Qt-based widgets and OpenSceneGraph-based 3D visualizers, and a Ruby library that allows to seamlessly display both logged and live data. Extending it with new widgets and visualizers is straightforward.

## Advanced System Management
Finally, Rock gives you rock-roby, a <a href="system/index.html">model-based system management layer</a> which will allow you to manage complex networks of components both at design and running time. Have a look first at the <a href="system_management_tutorials">corresponding tutorials</a>.

<div class="fullwidth_video_400">
    <iframe src="http://www.youtube.com/embed/QKl_0pGIfqI" frameborder="0" height="300" width="400">Youtube Video</iframe>
</div>




